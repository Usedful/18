Q.1 Write a JAVA Program to implement built-in support (java.util.Observable) Weather 
station with members temperature, humidity, pressure and methods 
mesurmentsChanged(), setMesurment(), getTemperature(), getHumidity(), 
getPressure()

Ans ->

import java.util.Observable;
import java.util.Observer;

// WeatherData class is the concrete subject that extends java.util.Observable
class WeatherData extends Observable {
    private float temperature;
    private float humidity;
    private float pressure;

    // Method to notify observers when measurements change
    public void measurementsChanged() {
        setChanged();
        notifyObservers();
    }

    // Setter methods for measurements
    public void setMeasurements(float temperature, float humidity, float pressure) {
        this.temperature = temperature;
        this.humidity = humidity;
        this.pressure = pressure;
        measurementsChanged();
    }

    // Getter methods for measurements
    public float getTemperature() {
        return temperature;
    }

    public float getHumidity() {
        return humidity;
    }

    public float getPressure() {
        return pressure;
    }
}

// CurrentConditionsDisplay class is an observer that implements java.util.Observer
class CurrentConditionsDisplay implements Observer {
    private float temperature;
    private float humidity;

    // Constructor with observable parameter
    public CurrentConditionsDisplay(Observable observable) {
        observable.addObserver(this);
    }

    // Update method called when the observable state changes
    @Override
    public void update(Observable o, Object arg) {
        if (o instanceof WeatherData) {
            WeatherData weatherData = (WeatherData) o;
            this.temperature = weatherData.getTemperature();
            this.humidity = weatherData.getHumidity();
            display();
        }
    }

    // Display method to show the current conditions
    public void display() {
        System.out.println("Current Conditions: " + temperature + "F degrees and " + humidity + "% humidity");
    }
}

// Client code
public class WeatherStation {
    public static void main(String[] args) {
        // Create the WeatherData observable
        WeatherData weatherData = new WeatherData();

        // Create an observer (display) and register with the observable
        CurrentConditionsDisplay currentDisplay = new CurrentConditionsDisplay(weatherData);

        // Simulate new weather measurements
        weatherData.setMeasurements(80, 65, 30.4f);
        weatherData.setMeasurements(82, 70, 29.2f);
        weatherData.setMeasurements(78, 90, 29.2f);
    }
}
